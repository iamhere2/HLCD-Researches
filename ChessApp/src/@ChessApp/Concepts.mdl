// by convention:
/*
    module ChessApp.Concepts
    {
        ...<all the content of this file>...
    }
*/

value type Color : enum
{
    Black,
    White
}

value type Figure : enum
{
    King,
    Knight,
    Tower,
    ...
}

// Constrained value type contains validator expression
value type HCoord : int where value in [1..8]

value type VCoord : char where value in ['A'..'H']

const Board
{
    Low : VCoord = 'A';
    High : VCoord = 'H';

    Left : HCoord = 1;
    Right : VCoord = 8;
}

CellColorAt(Cell) => ...;

value type Cell : ( VCoord, HCoord )

value type Turn : union
{
    MoveEat
    {
        From: Cell,
        To: Cell
    },
    Transform
    {
        From: Cell,
        To: Figure
    }
    Castle
    {
        To: Cell
    },
    Surrend,
    OfferDraw,
    AcceptDraw
}

value type BoardState
{
    Figures: map { Cell -> (Figure, Color)? }
}

const ClassicInitialState
{
    Figures =
    {
        ('A', 1) -> (Tower, White),
        ('A', 8) -> (Tower, White),
        ...
    }
}

value type GameHistory
{
    States: BoardState[];
    Turns: Turn[];
}
where
    // Invariants
    Turns.Length == States.Length - 1;

const ClassicInitialGameHistory
{
    States: [ ClassicInitialState ]
    Turns: []
}


