requires
{
    PlayerA : IPlayer
    PlayerB : IPlayer
    RulesEngine // by convetion: " : RulesEngine"
}

state // mutable fields
{
    GameHistory : GameHistory?;
    CancelToken : CancelToken?;
}

StartFrom(GameHistory gh, Color playerAColor)
{
    GameHistory = gh;

    if (CancelToken is not null)
        CancelToken.Cancel();

    CancelToken = new CancelToken();
    new Task(() => TurnCycle(playerAColor, CancelToken)).RunAsync();
}

StartNew(Color playerAColor) => StartFrom(GameHistory.ClassicInitialGameHistory, playerAColor);

private async TurnCycle(Color playerAColor, CancelToken cancelToken)
{
    var player = ... // TODO: PlayerA or PlayerB, depending on colors;

    while (!GameHistory.IsFinished && !cancelToken.IsCancelRequested)
    {
        var state = GameHistory.BoardStates.Last;
        var nextTurn = await player.NextTurn(state);

        if (cancelToken.IsCancelRequested)
            break;

        var violation = RulesEngine.Check(state, turn);

        if (violation is not null)
            throw new InvalidTurnException(violation);

        var nextState = state.Apply(turn);
        GameHistory = GameHistory.With(turn, nextState);

        player = player == playerA ? playerB : playerA;
    }
}

GetHistory() => GameHistory


