// We don't use here a lot of conventions intentionally, just for explanation reasons
// Children component's modules use much more conventions

module ChessApp
{
    // "use" is relation between modules
    // To _compile_ some module, you should have that modules, either already compiled or not.
    uses ChessEngine, FileStorage, ConsoleUI;

    // singleton component created as single instance by RunEnv
    singleton component ChessApp
        provides
        {
            IConsoleApplication via ConsoleUI
        }
        requires
        {
            IConsoleIO as ConsoleIO,
            IFileIO as IFileIO
        }
        children
        {
	    // Required interfaces delegated into children components
            FileStorage as FileStorage
                with { FileIO: FileIO };
	
	    // Children components can be linked between each other
            ConsoleUI as ConsoleUI
                with { ConsoleIO: ConsoleIO, Storage: FileStorage.IStorage, GameFlow: GameFlow, RulesChecker };

            RulesChecker;
            AIPlayer with { RulesChecker };
            GameFlow with { PlayerA: ConsoleUI.IPLayer, PlayerB: AIPLayer.IPlayer }
        }

    // In that particular case the component doesn't have any "body" with it's own data or methods.
    // Quite probable, that it would be common for high-level design.
    // All the required functionality obtained by delegation and interconnections to children components.
    // At the same time, it can't be said, that the component itself is "useless", 
    // because the interconnection/delegation scheme is not trivial!
    {
    }
}
